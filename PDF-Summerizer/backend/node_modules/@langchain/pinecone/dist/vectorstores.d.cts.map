{"version":3,"file":"vectorstores.d.cts","names":["RecordMetadata","Index","PineconeIndex","EmbeddingsInterface","VectorStore","MaxMarginalRelevanceSearchOptions","Document","DocumentInterface","AsyncCaller","AsyncCallerParams","PineconeMetadata","Record","HTTPHeaders","PineconeStoreParams","ConstructorParameters","PineconeDeleteParams","PineconeStore","Promise","_pinecone_database_pinecone0","QueryResponse"],"sources":["../src/vectorstores.d.ts"],"sourcesContent":["import { RecordMetadata, Index as PineconeIndex } from \"@pinecone-database/pinecone\";\nimport type { EmbeddingsInterface } from \"@langchain/core/embeddings\";\nimport { VectorStore, type MaxMarginalRelevanceSearchOptions } from \"@langchain/core/vectorstores\";\nimport { Document, type DocumentInterface } from \"@langchain/core/documents\";\nimport { AsyncCaller, AsyncCallerParams } from \"@langchain/core/utils/async_caller\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype PineconeMetadata = Record<string, any>;\ntype HTTPHeaders = {\n    [key: string]: string;\n};\n/**\n * Database config for your vectorstore.\n */\nexport interface PineconeStoreParams extends AsyncCallerParams {\n    /**\n     * The Pinecone index to use.\n     * Either this or pineconeConfig must be provided.\n     */\n    pineconeIndex?: PineconeIndex;\n    textKey?: string;\n    namespace?: string;\n    filter?: PineconeMetadata;\n    /**\n     * Configuration for the Pinecone index.\n     * Either this or pineconeIndex must be provided.\n     */\n    pineconeConfig?: {\n        indexName: ConstructorParameters<typeof PineconeIndex>[0];\n        config: ConstructorParameters<typeof PineconeIndex>[1];\n        namespace?: string;\n        indexHostUrl?: string;\n        additionalHeaders?: HTTPHeaders;\n    };\n}\n/**\n * Type that defines the parameters for the delete operation in the\n * PineconeStore class. It includes ids, filter, deleteAll flag, and namespace.\n */\nexport type PineconeDeleteParams = {\n    ids?: string[];\n    deleteAll?: boolean;\n    filter?: object;\n    namespace?: string;\n};\n/**\n * Pinecone vector store integration.\n *\n * Setup:\n * Install `@langchain/pinecone` and `@pinecone-database/pinecone` to pass a client in.\n *\n * ```bash\n * npm install @langchain/pinecone @pinecone-database/pinecone\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/_langchain_pinecone.PineconeStore.html#constructor)\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { PineconeStore } from '@langchain/pinecone';\n * // Or other embeddings\n * import { OpenAIEmbeddings } from '@langchain/openai';\n *\n * import { Pinecone as PineconeClient } from \"@pinecone-database/pinecone\";\n *\n * const pinecone = new PineconeClient();\n *\n * // Will automatically read the PINECONE_API_KEY env var\n * const pineconeIndex = pinecone.Index(process.env.PINECONE_INDEX!);\n *\n * const embeddings = new OpenAIEmbeddings({\n *   model: \"text-embedding-3-small\",\n * });\n *\n * const vectorStore = await PineconeStore.fromExistingIndex(embeddings, {\n *   pineconeIndex,\n *   // Maximum number of batch requests to allow at once. Each batch is 1000 vectors.\n *   maxConcurrency: 5,\n *   // You can pass a namespace here too\n *   // namespace: \"foo\",\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Add documents</strong></summary>\n *\n * ```typescript\n * import type { Document } from '@langchain/core/documents';\n *\n * const document1 = { pageContent: \"foo\", metadata: { baz: \"bar\" } };\n * const document2 = { pageContent: \"thud\", metadata: { bar: \"baz\" } };\n * const document3 = { pageContent: \"i will be deleted :(\", metadata: {} };\n *\n * const documents: Document[] = [document1, document2, document3];\n * const ids = [\"1\", \"2\", \"3\"];\n * await vectorStore.addDocuments(documents, { ids });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Delete documents</strong></summary>\n *\n * ```typescript\n * await vectorStore.delete({ ids: [\"3\"] });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Similarity search</strong></summary>\n *\n * ```typescript\n * const results = await vectorStore.similaritySearch(\"thud\", 1);\n * for (const doc of results) {\n *   console.log(`* ${doc.pageContent} [${JSON.stringify(doc.metadata, null)}]`);\n * }\n * // Output: * thud [{\"baz\":\"bar\"}]\n * ```\n * </details>\n *\n * <br />\n *\n *\n * <details>\n * <summary><strong>Similarity search with filter</strong></summary>\n *\n * ```typescript\n * const resultsWithFilter = await vectorStore.similaritySearch(\"thud\", 1, { baz: \"bar\" });\n *\n * for (const doc of resultsWithFilter) {\n *   console.log(`* ${doc.pageContent} [${JSON.stringify(doc.metadata, null)}]`);\n * }\n * // Output: * foo [{\"baz\":\"bar\"}]\n * ```\n * </details>\n *\n * <br />\n *\n *\n * <details>\n * <summary><strong>Similarity search with score</strong></summary>\n *\n * ```typescript\n * const resultsWithScore = await vectorStore.similaritySearchWithScore(\"qux\", 1);\n * for (const [doc, score] of resultsWithScore) {\n *   console.log(`* [SIM=${score.toFixed(6)}] ${doc.pageContent} [${JSON.stringify(doc.metadata, null)}]`);\n * }\n * // Output: * [SIM=0.000000] qux [{\"bar\":\"baz\",\"baz\":\"bar\"}]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>As a retriever</strong></summary>\n *\n * ```typescript\n * const retriever = vectorStore.asRetriever({\n *   searchType: \"mmr\", // Leave blank for standard similarity search\n *   k: 1,\n * });\n * const resultAsRetriever = await retriever.invoke(\"thud\");\n * console.log(resultAsRetriever);\n *\n * // Output: [Document({ metadata: { \"baz\":\"bar\" }, pageContent: \"thud\" })]\n * ```\n * </details>\n *\n * <br />\n */\nexport declare class PineconeStore extends VectorStore {\n    FilterType: PineconeMetadata;\n    textKey: string;\n    namespace?: string;\n    pineconeIndex: PineconeIndex;\n    filter?: PineconeMetadata;\n    caller: AsyncCaller;\n    _vectorstoreType(): string;\n    constructor(embeddings: EmbeddingsInterface, params: PineconeStoreParams);\n    /**\n     * Method that adds documents to the Pinecone database.\n     *\n     * @param documents Array of documents to add to the Pinecone database.\n     * @param options Optional ids for the documents.\n     * @returns Promise that resolves with the ids of the added documents.\n     */\n    addDocuments(documents: Document[], options?: {\n        ids?: string[];\n        namespace?: string;\n    } | string[]): Promise<string[]>;\n    /**\n     * Method that adds vectors to the Pinecone database.\n     *\n     * @param vectors Array of vectors to add to the Pinecone database.\n     * @param documents Array of documents associated with the vectors.\n     * @param options Optional ids for the vectors.\n     * @returns Promise that resolves with the ids of the added vectors.\n     */\n    addVectors(vectors: number[][], documents: Document[], options?: {\n        ids?: string[];\n        namespace?: string;\n    } | string[]): Promise<string[]>;\n    /**\n     * Method that deletes vectors from the Pinecone database.\n     * @param params Parameters for the delete operation.\n     * @returns Promise that resolves when the delete operation is complete.\n     */\n    delete(params: PineconeDeleteParams): Promise<void>;\n    protected _runPineconeQuery(query: number[], k: number, filter?: PineconeMetadata, options?: {\n        includeValues: boolean;\n    }): Promise<import(\"@pinecone-database/pinecone\").QueryResponse<RecordMetadata>>;\n    /**\n     * Format the matching results from the Pinecone query.\n     * @param matches Matching results from the Pinecone query.\n     * @returns An array of arrays, where each inner array contains a document and its score.\n     */\n    private _formatMatches;\n    /**\n     * Method that performs a similarity search in the Pinecone database and\n     * returns the results along with their scores.\n     * @param query Query vector for the similarity search.\n     * @param k Number of top results to return.\n     * @param filter Optional filter to apply to the search.\n     * @returns Promise that resolves with an array of documents and their scores.\n     */\n    similaritySearchVectorWithScore(query: number[], k: number, filter?: PineconeMetadata): Promise<[Document, number][]>;\n    /**\n     * Return documents selected using the maximal marginal relevance.\n     * Maximal marginal relevance optimizes for similarity to the query AND diversity\n     * among selected documents.\n     *\n     * @param {string} query - Text to look up documents similar to.\n     * @param {number} options.k - Number of documents to return.\n     * @param {number} options.fetchK=20 - Number of documents to fetch before passing to the MMR algorithm.\n     * @param {number} options.lambda=0.5 - Number between 0 and 1 that determines the degree of diversity among the results,\n     *                 where 0 corresponds to maximum diversity and 1 to minimum diversity.\n     * @param {PineconeMetadata} options.filter - Optional filter to apply to the search.\n     *\n     * @returns {Promise<DocumentInterface[]>} - List of documents selected by maximal marginal relevance.\n     */\n    maxMarginalRelevanceSearch(query: string, options: MaxMarginalRelevanceSearchOptions<this[\"FilterType\"]>): Promise<DocumentInterface[]>;\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from texts.\n     * @param texts Array of texts to add to the Pinecone database.\n     * @param metadatas Metadata associated with the texts.\n     * @param embeddings Embeddings to use for the texts.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */\n    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: EmbeddingsInterface, dbConfig: {\n        pineconeIndex: PineconeIndex;\n        textKey?: string;\n        namespace?: string | undefined;\n    } | PineconeStoreParams): Promise<PineconeStore>;\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from documents.\n     * @param docs Array of documents to add to the Pinecone database.\n     * @param embeddings Embeddings to use for the documents.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */\n    static fromDocuments(docs: Document[], embeddings: EmbeddingsInterface, dbConfig: PineconeStoreParams): Promise<PineconeStore>;\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from an existing index.\n     * @param embeddings Embeddings to use for the documents.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */\n    static fromExistingIndex(embeddings: EmbeddingsInterface, dbConfig: PineconeStoreParams): Promise<PineconeStore>;\n}\nexport {};\n"],"mappings":";;;;;;;;;KAMKU,gBAAAA,GAAmBC;KACnBC,WAAAA;EADAF,CAAAA,GAAAA,EAAAA,MAAAA,CAAAA,EAAAA,MAAgB;AAAS,CAAA;AAO9B;;;AAQaA,UARIG,mBAAAA,SAA4BJ,iBAQhCC,CAAAA;EAAgB;;;;EAOQ,aAGTE,CAAAA,EAbRV,KAaQU;EAAW,OAlBMH,CAAAA,EAAAA,MAAAA;EAAiB,SAAA,CAAA,EAAA,MAAA;EAyBlDM,MAAAA,CAAAA,EAjBCL,gBAiBmB;EA2IXM;;;;EAIW,cACnBN,CAAAA,EAAAA;IACDF,SAAAA,EA5JOM,qBA4JPN,CAAAA,OA5JoCN,KA4JpCM,CAAAA,CAAAA,CAAAA,CAAAA;IAEgBL,MAAAA,EA7JZW,qBA6JYX,CAAAA,OA7JiBD,KA6JjBC,CAAAA,CAAAA,CAAAA,CAAAA;IAA6BU,SAAAA,CAAAA,EAAAA,MAAAA;IAQ7BP,YAAAA,CAAAA,EAAAA,MAAAA;IAGTW,iBAAAA,CAAAA,EArKSL,WAqKTK;EAAO,CAAA;;;;;;AAqBwDC,KAnLtEH,oBAAAA,GAmLsEG;EAAf,GAA3DD,CAAAA,EAAAA,MAAAA,EAAAA;EAAO,SAe0DP,CAAAA,EAAAA,OAAAA;EAAgB,MAAYJ,CAAAA,EAAAA,MAAAA;EAAQ,SAAjBW,CAAAA,EAAAA,MAAAA;CAAO;;;;;;;;;;;;;;;;;;AAvD7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAAjCD,aAAAA,SAAsBZ,WAAAA;cAC3BM;;;iBAGGR;WACNQ;UACDF;;0BAEgBL,6BAA6BU;;;;;;;;0BAQ7BP;;;iBAGTW;;;;;;;;;6CAS4BX;;;iBAG5BW;;;;;;iBAMAF,uBAAuBE;mEAC2BP;;MAE7DO,QAA0EC,4BAAAA,CAA5BC,cAAcnB;;;;;;;;;;;;;;;uEAeKU,mBAAmBO,SAASX;;;;;;;;;;;;;;;qDAe9CD,wDAAwDY,QAAQV;;;;;;;;;;8EAUvCJ;mBACzDD;;;MAGfW,sBAAsBI,QAAQD;;;;;;;;;6BASPV,wBAAwBH,+BAA+BU,sBAAsBI,QAAQD;;;;;;;;uCAQ3Eb,+BAA+BU,sBAAsBI,QAAQD"}