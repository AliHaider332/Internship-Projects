{"version":3,"file":"embeddings.d.ts","names":["Embeddings","EmbeddingsParams","Pinecone","PineconeConfiguration","PineconeEmbeddingsParams","Record","PineconeEmbeddings","Partial","Promise"],"sources":["../src/embeddings.d.ts"],"sourcesContent":["import { Embeddings, type EmbeddingsParams } from \"@langchain/core/embeddings\";\nimport { Pinecone, PineconeConfiguration } from \"@pinecone-database/pinecone\";\n/* PineconeEmbeddingsParams holds the optional fields a user can pass to a Pinecone embedding model.\n * @param model - Model to use to generate embeddings. Default is \"multilingual-e5-large\".\n * @param params - Additional parameters to pass to the embedding model. Note: parameters are model-specific. Read\n *  more about model-specific parameters in the [Pinecone\n *  documentation](https://docs.pinecone.io/guides/inference/understanding-inference#model-specific-parameters).\n * */\nexport interface PineconeEmbeddingsParams extends EmbeddingsParams {\n    model?: string; // Model to use to generate embeddings\n    params?: Record<string, string>; // Additional parameters to pass to the embedding model\n}\n/* PineconeEmbeddings generates embeddings using the Pinecone Inference API. */\nexport declare class PineconeEmbeddings extends Embeddings implements PineconeEmbeddingsParams {\n    client: Pinecone;\n    model: string;\n    params: Record<string, string>;\n    constructor(fields?: Partial<PineconeEmbeddingsParams> & Partial<PineconeConfiguration>);\n    /* Generate embeddings for a list of input strings using a specified embedding model.\n     *\n     * @param texts - List of input strings for which to generate embeddings.\n     * */\n    embedDocuments(texts: string[]): Promise<number[][]>;\n    /* Generate embeddings for a given query string using a specified embedding model.\n     * @param text - Query string for which to generate embeddings.\n     * */\n    embedQuery(text: string): Promise<number[]>;\n}\n"],"mappings":";;;;;;;AAQA;;;;AAAkE,UAAjDI,wBAAAA,SAAiCH,gBAAgB,CAAA;EAK7CK,KAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA;EAAkB,MAAA,CAAA,EAH1BD,MAG0B,CAAA,MAAA,EAAA,MAAA,CAAA,CAAA,CAAA;;;AAIND,cAJZE,kBAAAA,SAA2BN,UAAAA,YAAsBI,wBAIrCA,CAAAA;EAAwB,MAAhCG,EAHbL,QAGaK;EAAO,KAAqCJ,EAAAA,MAAAA;EAAqB,MAA7BI,EADjDF,MACiDE,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;EAAO,WAK/BC,CAAAA,MAAAA,CAAAA,EALZD,OAKYC,CALJJ,wBAKII,CAAAA,GALwBD,OAKxBC,CALgCL,qBAKhCK,CAAAA;EAAO;;;AATkD;mCASzDA;;;;4BAIPA"}